openapi: '3.0.0'
info:
  description: 'Backend to manage Island Reservations'
  version: 1.0.0
  title: Island Reservation API

paths:
  /reservations:
    post:
      tags:
        - Reservations
      summary: Create a new reservation
      operationId: createReservation
      requestBody:
        required: true
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reservation'
      responses:
        '200':
          description: 'Successfully created reservation.'
          content:
            application/json:
              schema:
                type: string
                pattern: RESERVATION_X_PATTERN  #todo
                example: 'RESERVATION_ID'
        '400':
          description: 'Bad request.'
          content:
            application/json:
              schema:
                type: string
                example: 'IRP1/IRP2'
        '403':
          description: 'Forbidden request'
          content:
            application/json:
              schema:
                type: string
                example: 'IRP3/IRP4'

  /reservations/{reservation_id}:
    get:
      tags:
        - Reservations
      summary: gets an existing reservation
      operationId: getReservation
      parameters:
        - in: path
          name: reservation_id
          required: true
          schema:
            type: string
            pattern: RESERVATION_X_PATTERN #todo
      responses:
        '200':
          description: 'Successfully retrieved reservation'
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Reservation'
        '404':
          description: 'Reservation not found'
          content:
            application/json:
              schema:
                type: string
                example: 'IRG1'

  /reservations/{reservation_id}/{transaction}:
    put:
      tags:
        - Reservations
      summary: Modifies an existing reservation
      operationId: updateReservation
      parameters:
        - in: path
          name: reservation_id
          required: true
          schema:
            type: string
            pattern: RESERVATION_X_PATTERN #todo
        - in: path
          name: transaction
          required: true
          schema:
            type: string
            enum: [ MODIFY, CANCEL ]
      requestBody:
        required: false
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Reservation'
      responses:
        '200':
          description: 'Successfully updated reservation.'
        '206':
          description: 'Reservation Partially updated; Could not update client as another reservation is using the
          current email'
        '400':
          description: 'Bad request'
          content:
            application/json:
              schema:
                example: 'IRPU1,IRPU2,IRPU3,IRPU4,IRPU5'
        '403':
          description: 'Forbidden IRPU6 '
          content:
            application/json:
              schema:
                type: string
                example: 'IRPU6'
        '404':
          description: 'Reservation not found IRPU7'
          content:
            application/json:
              schema:
                type: string
                example: 'IRPU7'

  /campsite/calendar/dates:
    get:
      tags:
        - Calendar
      summary: get campsite availability
      operationId: getCampsiteAvailability
      parameters:
        - in: query
          name: available
          schema:
            type: boolean
            default: true
        - in: query
          name: range
          schema:
            type: string
            enum: [ WEEK, MONTH ]
      responses:
        '200':
          description: 'Successfully retrieved reservations'
          content:
            application/json:
              schema:
                type: array
                items:
                  type: string
                  format: date

components:
  schemas:
    Reservation:
      required: [
          "client",
          "startDate",
          "endDate"
      ]
      type: object
      properties:
        client:
          $ref: '#/components/schemas/Client'
        startDate:
          type: string
          format: date
          example: '2020-01-01'
        endDate:
          type: string
          format: date
          example: '2020-02-01'

    Client:
      required: [
          "email"
      ]
      type: object
      properties:
        email:
          type: string
          pattern: "^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,6}$"
          example: 'my_email@myorganization.ca'
        firstName:
          type: string
          example: 'John'
        lastName:
          type: string
          example: 'Smith'

    Error:
      type: string
      enum: [ IRP1,IRP2,IRP3,IRP4,IRG1,IRPU1,IRPU2,IRPU3,IRPU4,IRPU5,IRPU6,IRPU7 ]
      description: |
         * `IRP1` - Reservation is for more than 3 days
         * `IRP2` - Start & End dates are not with in a month
         * `IRP3` - Cannot reserve desired time range, already reserved by someone else
         * `IRP4` - Cannot reserve, client already has another existing reservation
         * `IRG1` - Cannot find a reservation with that ID
         * `IRPU1` - Reservation is for more than 3 days
         * `IRPU2` - Start & End dates are not with in a month
         * `IRPU3` - Can not modify an empty reservation
         * `IRPU4` - Request body has to be empty to cancel the reservation
         * `IRPU5` - Nothing to modify
         * `IRPU6` - Cannot reserve desired time range, already reserved by someone else
         * `IRPU7` - Cannot find a reservation with that ID to modify or cancel